// game_local.h
//

namespace QuakeAPI
{
	void SetMinMaxSize(edict_t* e, const vec3_t& min, const vec3_t& max, qboolean rotate);
	void makevectors(const vec3_t& org);
	void setorigin(edict_t* e, const vec3_t& org);
	void setsize(edict_t* e, const vec3_t& min, const vec3_t& max);
	void setmodel(edict_t* e, const char* m);
	void bprint(const char* s);
	void sprint(int entnum, const char* s);
	void centerprint(int entnum, const char* s);
	vec3_t normalize(const vec3_t& value1);
	float vlen(const vec3_t& value1);
	float vectoyaw(const vec3_t& value1);
	vec3_t vectoangles(const vec3_t& value1);
	float random();
	void particle(const vec3_t& org, const vec3_t& dir, float color, float count);
	void ambientsound(const vec3_t& pos, const char* samp, float vol, float attenuation);
	void sound(edict_t* entity, int channel, const char* sample, int volume, float attenuation);
	void break_statement();
	void traceline(const vec3_t& v1, const vec3_t& v2, int nomonsters, edict_t* ent);
	int newcheckclient(int check);
	edict_t* checkclient();
	void stuffcmd(edict_t* ent, const char* str);
	void localcmd(const char* str);
	float cvar(const char* str);
	void cvar_set(const char* var, const char* val);
	bool checkpos(edict_t* entity, const vec3_t& vector);
	edict_t* PF_findradius(const vec3_t& org, float rad);
	void dprint(const char* str);
	std::string ftos(float v);
	std::string vtos(const vec3_t& v);
	std::string etos(edict_t* e);
	edict_t* Spawn();
	void Remove(edict_t* ed);
	edict_t* Find(edict_t* start, int field, const char* match);
	void CheckEmptyString(const char* s);
	int precache_file(const char* filename);
	int precache_sound(const char* soundname);
	int precache_model(const char* modelname);
	void coredump();
	void traceon();
	void traceoff();
	void eprint(edict_t* e0);
	float walkmove(float yaw, float dist);
	int droptofloor();
	void lightstyle(float style, const char* s0);
	int rint(float f0);
	void floor(float f0);
	void ceil(float f0);
	int checkbottom(edict_t* e0);
	int pointcontents(vec3_t p0);
	edict_t* nextent(edict_t* e0);
	vec3_t aim(edict_t* ent, float speed);
	void changeyaw();
	sizebuf_t* WriteDest(float dest);
	void WriteByte(float dest, float value);
	void WriteChar(float dest, float value);
	void WriteShort(float dest, float value);
	void WriteLong(float dest, float value);
	void WriteAngle(float dest, float value);
	void WriteCoord(float dest, float value);
	void WriteString(float dest, const char* s0);
	void WriteEntity(float dest, edict_t* e0);
	void makestatic(edict_t* ent);
	void setspawnparms(edict_t* ent);
	void changelevel(const char* levelName);
};